# currency_updater.py

import requests
import pandas as pd
from datetime import datetime, timedelta
import time
from xml.etree import ElementTree as ET
import os

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º –∏ –ª–æ–≥–∞–º
RATES_FILE = '/home/vulcan4ik/dashboard-cruise-app/app_data/currency_rates_2024-2025.csv'
LOG_FILE = '/home/vulcan4ik/dashboard-cruise-app/app_data/currency_updater.log'


def log_message(message):
    """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{datetime.now():%Y-%m-%d %H:%M:%S} | {message}\n")
    print(message)


def get_cbr_rates_for_date(date):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¶–ë –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å (USD –∏ EUR –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º)"""
    url = "http://www.cbr.ru/scripts/XML_daily.asp"
    params = {'date_req': date.strftime('%d/%m/%Y')}
    rates = {}

    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        root = ET.fromstring(response.content)

        for valute in root.findall('Valute'):
            code = valute.find('CharCode').text
            if code in ('USD', 'EUR'):
                value = float(valute.find('Value').text.replace(',', '.'))
                rates[code] = value

    except requests.exceptions.ConnectionError as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ {date.strftime('%d.%m.%Y')}: {e}")
        return None
    except requests.exceptions.Timeout as e:
        log_message(f"‚ùå Timeout –Ω–∞ {date.strftime('%d.%m.%Y')}: {e}")
        return None
    except ET.ParseError as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –Ω–∞ {date.strftime('%d.%m.%Y')}: {e}")
        return None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ {date.strftime('%d.%m.%Y')}: {type(e).__name__}: {e}")
        return None

    return rates if len(rates) == 2 else None


def is_rates_file_fresh(rates_file):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ —Ñ–∞–π–ª –∫—É—Ä—Å–æ–≤ """
    if not os.path.exists(rates_file):
        return False

    try:
        df = pd.read_csv(rates_file)
        df['date'] = pd.to_datetime(df['date'])
        last_date = df['date'].max().date()
        today = datetime.now().date()
        days_diff = (today - last_date).days
        
        if days_diff <= 1:
            log_message(f"‚úÖ –ö—É—Ä—Å—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {last_date}, –∑–∞–¥–µ—Ä–∂–∫–∞: {days_diff} –¥–Ω–µ–π)")
            return True
        else:
            log_message(f"‚ö†Ô∏è –ö—É—Ä—Å—ã —É—Å—Ç–∞—Ä–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {last_date}, –∑–∞–¥–µ—Ä–∂–∫–∞: {days_diff} –¥–Ω–µ–π)")
            return False
    except Exception as e:
        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ–∂–µ—Å—Ç–∏ –∫—É—Ä—Å–∞: {e}")
        return False


def download_cbr_rates_full(start_date='2024-01-01', end_date=None):
    """–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –¶–ë –†–§ –∑–∞ –ø–µ—Ä–∏–æ–¥"""

    if end_date is None:
        end_date = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')

    dates = pd.date_range(start=start_date, end=end_date, freq='D')
    rates_data = []

    log_message(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –¶–ë –†–§ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}...")

    for i, date in enumerate(dates):
        if i % 50 == 0:
            log_message(f"üìÜ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(dates)} –¥–∞—Ç...")

        rates = get_cbr_rates_for_date(date)
        if rates:
            rates_data.append({'date': date, 'USD': rates['USD'], 'EUR': rates['EUR']})
        else:
            log_message(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –¥–∞—Ç–∞ {date.strftime('%d.%m.%Y')} (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
        time.sleep(0.2)

    df_currency_rate = pd.DataFrame(rates_data)

    if not df_currency_rate.empty:
        os.makedirs(os.path.dirname(RATES_FILE), exist_ok=True)
        df_currency_rate.to_csv(RATES_FILE, index=False)
        log_message(f"‚úÖ –ö—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {RATES_FILE}")
        log_message(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_currency_rate)} –∑–∞–ø–∏—Å–µ–π")
        return df_currency_rate
    else:
        log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return None


def update_exchange_rates(rates_file=RATES_FILE):
    """–î–æ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É—Ä—Å—ã –∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç"""

    log_message(f"\n{'='*60}")
    log_message(f"üöÄ –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–£–†–°–û–í –¶–ë –†–§ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    log_message(f"{'='*60}\n")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(rates_file):
        log_message("‚ö†Ô∏è –§–∞–π–ª –∫—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—ë —Å –Ω—É–ª—è...")
        df = download_cbr_rates_full()
        if df is not None:
            log_message(f"\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π\n")
            return {
                'status': 'success',
                'message': f'–ö—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–æ {df["date"].max().strftime("%d.%m.%Y")}',
                'data': df
            }
        return {'status': 'error', 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã', 'data': None}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
    if is_rates_file_fresh(rates_file):
        existing_df = pd.read_csv(rates_file)
        existing_df['date'] = pd.to_datetime(existing_df['date'])
        last_date = existing_df['date'].max()
        log_message(f"\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø - –î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã\n")
        return {
            'status': 'up_to_date',
            'message': f'–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {last_date.strftime("%d.%m.%Y")}',
            'data': existing_df
        }

    # –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        existing_df = pd.read_csv(rates_file)
        existing_df['date'] = pd.to_datetime(existing_df['date'])
        last_date = existing_df['date'].max().date()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ –¥–æ –≤—á–µ—Ä—ã
        start_date = last_date + timedelta(days=1)
        end_date = (datetime.now() - timedelta(days=1)).date()

        if start_date > end_date:
            log_message(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {last_date})")
            log_message(f"\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø\n")
            return {
                'status': 'up_to_date',
                'message': f'–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {last_date.strftime("%d.%m.%Y")}',
                'data': existing_df
            }

        dates_to_download = pd.date_range(start=start_date, end=end_date, freq='D')
        log_message(f"üì• –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ {len(dates_to_download)} –¥–Ω–µ–π: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n")

        new_rates_data = []

        for i, date in enumerate(dates_to_download):
            rates = get_cbr_rates_for_date(date)
            if rates:
                new_rates_data.append({'date': date, 'USD': rates['USD'], 'EUR': rates['EUR']})
            
            time.sleep(0.1)

        if new_rates_data:
            new_df = pd.DataFrame(new_rates_data)
            updated_df = pd.concat([existing_df, new_df], ignore_index=True)
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –¥–∞—Ç–µ
            updated_df = updated_df.drop_duplicates(subset=['date']).sort_values('date').reset_index(drop=True)
            
            updated_df.to_csv(rates_file, index=False)
            latest_date = updated_df['date'].max()
            
            log_message(f"\n‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_df)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            log_message(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(updated_df)}")
            log_message(f"üìÖ –ü–µ—Ä–∏–æ–¥: {updated_df['date'].min().strftime('%d.%m.%Y')} - {latest_date.strftime('%d.%m.%Y')}")
            log_message(f"\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û\n")
            
            return {
                'status': 'success',
                'message': f'–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ {latest_date.strftime("%d.%m.%Y")}',
                'data': updated_df
            }
        else:
            log_message("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            log_message(f"\n‚ö†Ô∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï–ú\n")
            return {
                'status': 'partial',
                'message': f'–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É—Ä—Å—ã –Ω–∞ {last_date.strftime("%d.%m.%Y")}',
                'data': existing_df
            }

    except Exception as e:
        log_message(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {type(e).__name__}: {e}")
        import traceback
        log_message(f"Traceback: {traceback.format_exc()}")
        log_message(f"\n‚ùå –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–û–ô\n")
        return {'status': 'error', 'message': f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}', 'data': None}


# üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§...\n")
    result = update_exchange_rates()

    if result["status"] in ("success", "up_to_date"):
        print(f"\n‚úÖ {result['message']}\n")
    else:
        print(f"\n‚ö†Ô∏è {result['message']}\n")