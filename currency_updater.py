# currency_updater.py

import requests
import pandas as pd
from datetime import datetime, timedelta
import time
from xml.etree import ElementTree as ET
import os

def get_cbr_rate(date, currency_code):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¶–ë –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    url = "http://www.cbr.ru/scripts/XML_daily.asp"
    params = {'date_req': date.strftime('%d/%m/%Y')}

    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            root = ET.fromstring(response.content)
            for valute in root.findall('Valute'):
                if valute.find('CharCode').text == currency_code:
                    value = valute.find('Value').text
                    return float(value.replace(',', '.'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {currency_code} –Ω–∞ {date}: {e}")

    return None


def download_cbr_rates_full(start_date='2024-01-01', end_date=None):
    """–ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –¶–ë –†–§ –∑–∞ –ø–µ—Ä–∏–æ–¥"""

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –µ—Å–ª–∏ end_date –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    if end_date is None:
        end_date = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')

    dates = pd.date_range(start=start_date, end=end_date, freq='D')
    rates_data = []

    print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –¶–ë –†–§ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}...")

    for i, date in enumerate(dates):
        if i % 50 == 0:
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(dates)} –¥–∞—Ç...")

        usd_rate = get_cbr_rate(date, 'USD')
        eur_rate = get_cbr_rate(date, 'EUR')

        if usd_rate and eur_rate:
            rates_data.append({
                'date': date,
                'USD': usd_rate,
                'EUR': eur_rate
            })

        time.sleep(0.2)  # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å API –¶–ë

    df_currency_rate = pd.DataFrame(rates_data)

    if not df_currency_rate.empty:
        filename = '/home/vulcan4ik/dashboard-cruise-app/app_data/currency_rates_2024-2025.csv'
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        df_currency_rate.to_csv(filename, index=False)

        print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_currency_rate)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df_currency_rate['date'].min()} - {df_currency_rate['date'].max()}")

        return df_currency_rate
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return None


def update_exchange_rates(rates_file='/home/vulcan4ik/dashboard-cruise-app/app_data/currency_rates_2024-2025.csv'):
    """–î–æ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É—Ä—Å—ã –∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø–µ—Ä–∏–æ–¥ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""

    try:
        existing_df = pd.read_csv(rates_file)
        existing_df['date'] = pd.to_datetime(existing_df['date'])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(existing_df)}")

    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª –∫—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
        result = download_cbr_rates_full()

        if result is not None:
            return {
                'status': 'success',
                'message': f'–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É: {result["date"].max().strftime("%d.%m.%Y")}',
                'data': result
            }
        else:
            return {
                'status': 'error',
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.',
                'data': None
            }

    except Exception as e:
        return {
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∫—É—Ä—Å–æ–≤: {e}. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.',
            'data': None
        }

    last_date = existing_df['date'].max()
    current_date = datetime.now().date()
    yesterday = (datetime.now() - timedelta(days=1)).date()
    last_date_only = last_date.date()

    print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–∞–π–ª–µ: {last_date.strftime('%d.%m.%Y')}")
    print(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%d.%m.%Y')}")

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    # (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫—É—Ä—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã)
    if last_date_only >= yesterday:
        return {
            'status': 'up_to_date',
            'message': f'–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –¥–∞—Ç—É: {last_date.strftime("%d.%m.%Y")}',
            'data': existing_df
        }

    # –ù—É–∂–Ω–æ –¥–æ–∑–∞–≥—Ä—É–∑–∏—Ç—å - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ç–æ–ª—å–∫–æ –¥–æ –≤—á–µ—Ä–∞
    start_date = last_date + timedelta(days=1)
    end_date = datetime.now() - timedelta(days=1)  # –î–æ –≤—á–µ—Ä–∞, –Ω–µ –¥–æ —Å–µ–≥–æ–¥–Ω—è

    dates_to_download = pd.date_range(start=start_date, end=end_date, freq='D')

    print(f"üì• –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–∑–∞–≥—Ä—É–∑–∫–∏ {len(dates_to_download)} –¥–Ω–µ–π: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")

    new_rates_data = []

    for i, date in enumerate(dates_to_download):
        if i % 20 == 0:
            print(f"‚è≥ –î–æ–∑–∞–≥—Ä—É–∂–µ–Ω–æ {i}/{len(dates_to_download)}...")

        usd_rate = get_cbr_rate(date, 'USD')
        eur_rate = get_cbr_rate(date, 'EUR')

        if usd_rate and eur_rate:
            new_rates_data.append({
                'date': date,
                'USD': usd_rate,
                'EUR': eur_rate
            })

        time.sleep(0.2)

    # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if new_rates_data:
        new_df = pd.DataFrame(new_rates_data)
        updated_df = pd.concat([existing_df, new_df], ignore_index=True)

        try:
            updated_df.to_csv(rates_file, index=False)
            latest_date = updated_df['date'].max()

            print(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω!")
            print(f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(new_df)}")
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(updated_df)}")

            return {
                'status': 'success',
                'message': f'–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É: {latest_date.strftime("%d.%m.%Y")}',
                'data': updated_df
            }

        except Exception as e:
            return {
                'status': 'error',
                'message': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã. –†–∞—Å—á–µ—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ {last_date.strftime("%d.%m.%Y")}',
                'data': existing_df
            }

    else:
        # –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            'status': 'partial',
            'message': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –†–∞—Å—á–µ—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {last_date.strftime("%d.%m.%Y")}',
            'data': existing_df
        }


if __name__ == "__main__":
    update_exchange_rates()

