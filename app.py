from flask import Flask, request, render_template, redirect, url_for, flash, send_file
import os
from werkzeug.utils import secure_filename
import processsing
from datetime import datetime
import pandas as pd

app = Flask(__name__)
app.secret_key = 'your-secret-key-here'
app.config['UPLOAD_FOLDER'] = 'uploads/'
app.config['RESULTS_FOLDER'] = '/home/vulcan4ik/dashboard-cruise-app/results'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['RESULTS_FOLDER'], exist_ok=True)

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
ALLOWED_EXTENSIONS = {'xlsx', 'xls', 'csv'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def get_currency_status():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        rates_file = '/home/vulcan4ik/dashboard-cruise-app/app_data/currency_rates_2024-2025.csv'

        if not os.path.exists(rates_file):
            return {
                'status': 'error',
                'message': '–§–∞–π–ª –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                'class': 'error'
            }

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫—É—Ä—Å–æ–≤
        rates_df = pd.read_csv(rates_file)
        rates_df['date'] = pd.to_datetime(rates_df['date'])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã
        min_date = rates_df['date'].min()
        max_date = rates_df['date'].max()
        total_records = len(rates_df)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        today = datetime.now()
        days_old = (today - max_date).days

        if days_old <= 2:
            status_class = 'success'
            status_text = '‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã'
        elif days_old <= 7:
            status_class = 'warning'
            status_text = '‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
        else:
            status_class = 'error'
            status_text = '‚ùå –£—Å—Ç–∞—Ä–µ–ª–∏'

        return {
            'status': status_class,
            'message': status_text,
            'min_date': min_date.strftime('%d.%m.%Y'),
            'max_date': max_date.strftime('%d.%m.%Y'),
            'total_records': total_records,
            'days_old': days_old,
            'class': status_class
        }

    except Exception as e:
        return {
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞: {str(e)}',
            'class': 'error'
        }

@app.route('/')
def index():
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    currency_info = get_currency_status()
    return render_template('index.html', currency_info=currency_info)

@app.route('/download/<filename>')
def download_file(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if '/' in filename or '\\' in filename or not filename.endswith('.csv'):
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞')
            return redirect(url_for('index'))

        file_path = os.path.join(app.config['RESULTS_FOLDER'], filename)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            flash('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return redirect(url_for('index'))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return send_file(
            file_path,
            as_attachment=True,
            download_name=f"cruise_analytics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mimetype='text/csv'
        )

    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}')
        return redirect(url_for('index'))

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'GET':
        return redirect('/')

    if 'file' not in request.files:
        flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω')
        return redirect(url_for('index'))

    file = request.files['file']

    if file.filename == '':
        flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω')
        return redirect(url_for('index'))

    if not (file and allowed_file(file.filename)):
        flash('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls) –∏ CSV')
        return redirect(url_for('index'))

    filepath = None
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        print(f"üìÇ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –í–ê–ñ–ù–û: –ø–æ–ª—É—á–∞–µ–º –î–í–ê –∑–Ω–∞—á–µ–Ω–∏—è
        df_processed, result_filename = processsing.process_and_upload(filepath)

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(df_processed)}")
        print(f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result_filename}")

        flash('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!')
        flash(f'üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(df_processed)}')
        flash(f'üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
        flash(f'üì• CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ DataLens')

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º filename —á–µ—Ä–µ–∑ GET –ø–∞—Ä–∞–º–µ—Ç—Ä
        print(f"üîó –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ success —Å filename={result_filename}")
        return redirect(url_for('success', filename=result_filename))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        flash(f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}')
        return redirect(url_for('index'))

    finally:
        # –£–î–ê–õ–Ø–ï–ú –§–ê–ô–õ –ü–û–°–õ–ï –û–ë–†–ê–ë–û–¢–ö–ò
        if filepath and os.path.exists(filepath):
            try:
                os.remove(filepath)
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filename}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")

@app.route('/success')
def success():
    # –ü–æ–ª—É—á–∞–µ–º filename –∏–∑ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    filename = request.args.get('filename')
    print(f"üìÑ Success page - –ø–æ–ª—É—á–µ–Ω filename: {filename}")
    return render_template('success.html', filename=filename)

if __name__ == '__main__':
    app.run(debug=True)